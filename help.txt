import React, { useEffect, useState } from "react";

interface ElementCount {
  [key: string]: number;
}

interface LengthData {
  type: string;
  length: number;
}

const SummaryTable: React.FC = () => {
  const [counts, setCounts] = useState<ElementCount>({});
  const [details, setDetails] = useState<LengthData[]>([]);

  useEffect(() => {
    const fetchSummary = async () => {
      try {
        const response = await fetch("YOUR_API_ENDPOINT_HERE");
        const data = await response.json();

        const summary = generateSummary(data);
        setCounts(summary.counts);
        setDetails(summary.details);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchSummary();
  }, []);

  const generateSummary = (geoJson: any) => {
    const counts: ElementCount = {};
    const details: LengthData[] = [];

    geoJson.features.forEach((feature: any) => {
      const type = feature.geometry.type;
      counts[type] = (counts[type] || 0) + 1;

      if (type.includes("LineString")) {
        const length = computeLength(feature.geometry.coordinates);
        details.push({ type, length });
      }
    });

    return { counts, details };
  };

  const computeLength = (coordinates: number[][]) => {
    let totalLength = 0;
    for (let i = 0; i < coordinates.length - 1; i++) {
      const [lon1, lat1] = coordinates[i];
      const [lon2, lat2] = coordinates[i + 1];
      totalLength += getDistance(lat1, lon1, lat2, lon2);
    }
    return totalLength;
  };

  const getDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => {
    const R = 6371; // Earth's radius in km
    const dLat = ((lat2 - lat1) * Math.PI) / 180;
    const dLon = ((lon2 - lon1) * Math.PI) / 180;
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos((lat1 * Math.PI) / 180) *
        Math.cos((lat2 * Math.PI) / 180) *
        Math.sin(dLon / 2) *
        Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  };

  return (
    <div className="mt-4">
      <h2 className="text-xl font-bold">Summary</h2>
      <table className="border-collapse border border-gray-400 w-full mt-2">
        <thead>
          <tr>
            <th className="border border-gray-300 px-4 py-2">Element Type</th>
            <th className="border border-gray-300 px-4 py-2">Count</th>
          </tr>
        </thead>
        <tbody>
          {Object.entries(counts).map(([type, count]) => (
            <tr key={type}>
              <td className="border border-gray-300 px-4 py-2">{type}</td>
              <td className="border border-gray-300 px-4 py-2">{count}</td>
            </tr>
          ))}
        </tbody>
      </table>

      <h2 className="text-xl font-bold mt-4">Detailed Length Data</h2>
      <table className="border-collapse border border-gray-400 w-full mt-2">
        <thead>
          <tr>
            <th className="border border-gray-300 px-4 py-2">Element Type</th>
            <th className="border border-gray-300 px-4 py-2">Total Length (km)</th>
          </tr>
        </thead>
        <tbody>
          {details.map((detail, index) => (
            <tr key={index}>
              <td className="border border-gray-300 px-4 py-2">{detail.type}</td>
              <td className="border border-gray-300 px-4 py-2">{detail.length.toFixed(2)}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default SummaryTable;
